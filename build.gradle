apply plugin: 'war'

webAppDirName = 'dist'
buildDir = 'war'

repositories {
    mavenLocal()
    mavenCentral()
    // For GIT-based content:
//        maven { url "https://jitpack.io" }
//        jcenter()
}

allprojects {
    version = '1.0'
}

dependencies {
    compile group: 'org.tuckey', name: 'urlrewritefilter', version: '4.0.4'

}

project.ext {  
    vendor = 'Emerald Pool Solutions, LLC'
    groupId = 'com.emeraldpoolsolutions'
    appName = 'RoomToReact'
} 

war.doFirst{
    manifest {
        attributes("Manifest-Version": "1.0",
                "Created-By" : vendor,
                "Specification-Title": appName,
                "Specification-Version": version,
                "Specification-Vendor": vendor,
                "Implementation-Title": appName,
                "Implementation-Version" : version,
                "Implementation-Vendor": vendor,
        )
    }
}

war {
    webInf { from 'build/jboss/WEB-INF' }
}

//uploadArchives {
//    repositories.mavenDeployer {
//        pom.groupId = groupId
//        pom.artifactId = appName
//        
//        repository(url: "${nexusUrl}/content/repositories/releases") {
//            authentication(userName: nexusUsername, password: nexusPassword)
//        }
//        
//        snapshotRepository(url: "${nexusUrl}/content/repositories/snapshots") {
//            authentication(userName: nexusUsername, password: nexusPassword)
//        }
//    }
//}

// Call script to determine successful deployment:
//    #!/bin/sh
//    MAX_WAIT=180
//    DELAY=10
//    TOTAL_WAIT=0
//    
//    until [ $TOTAL_WAIT -gt $MAX_WAIT ]
//    do
//        if $JBOSS_HOME/bin/jboss-cli.sh -c --command="deployment-info --name=mydeployment.war" | grep -q "OK"
//        then break
//        fi
//        echo Application is not deployed withing $TOTAL_WAIT seconds. Waiting for another $DELAY seconds...
//        sleep $DELAY
//        let TOTAL_WAIT=$TOTAL_WAIT+$DELAY;
//    done

task deploy(dependsOn: war, type: Copy) {
    
    def destinationDirectory = "/opt/wildfly-alt/standalone/deployments";
    def destinationWar = "${destinationDirectory}/" + war.baseName + "." + war.extension;
    def pattern = "(.*)-" + war.version + ".(.*)";
    
    from war.archivePath
    into "${destinationDirectory}"
    rename ~/${pattern}/, '$1.$2'
    
    def ok = new File("${destinationWar}.deployed");
    def nok = new File("${destinationWar}.failed");

    doFirst {
        println "deploy doFirst"
        if (ok.exists()) {
            ok.delete()
        }
        if (nok.exists()) {
            nok.delete()
        }
    }

    doLast {
        logger.info("Deployment destination: ${destinationWar}");
        println "Deployment destination: ${destinationWar}"

        def deployed = false as Object
        for (def i = 0; i < 80; i++) {
            if (ok.exists()) {
                deployed = true; break
            }
            if (nok.exists()) {
                break
            }
            sleep(500);
        }
        if (deployed) {
            println("deploy ok.")
        } else {
            throw new RuntimeException("Deployment failed, see Wildfly logs!")
        }
    }
}


