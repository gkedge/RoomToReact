---
# file: roles/wildfly/install/tasks/main.yml
#- name: "Dump all variables"
#  template: src=dumpall.j2 dest=/tmp/wildfly.all

- name: Is wildfly currently installed?
  shell: "[ -f {{ jboss_home }}/jboss-modules.jar ] && echo 'Found' || echo ''"
  register: wildfly_installed
  tags: wildfly 

- name: Create a wildfly installation directory
  file: path={{ wildfly_install_dir }} state=directory
  when: (not wildfly_installed.stdout)
  tags: wildfly 

- name: Is current version of wildfly already installed?
  shell: "[ -f {{ wildfly_version_file }} ] && grep -q '{{ wildfly_version_text }}' {{ wildfly_version_file }} && echo $?"
  when: wildfly_installed.stdout
  register: wildfly_version_installed
  changed_when: "wildfly_version_installed.rc == 1"
  ignore_errors: False
  tags: wildfly 

#- name: Download wildfly binary
#  get_url: dest={{ wildfly_install_dir }}/{{ wildfly_download_file }} url={{ wildfly_download_url }}
#  when: (not wildfly_installed.stdout) or (not wildfly_version_installed.stdout)
#  tags: wildfly 

- name: Create any groups that the wildfly user should belong to
  group: name={{ item }} state=present
  with_items: jboss_groups
  when: (not wildfly_installed.stdout) or (not wildfly_version_installed.stdout)
  tags: wildfly 

- name: Create wildfly user if missing
  user: 
    name: "{{ jboss_user }}"
    password: "{{ jboss_password }}"
    createhome: no
    system: yes
    group: "{{ jboss_group }}"
    state: present
  when: (not wildfly_installed.stdout) or (not wildfly_version_installed.stdout)
  tags: wildfly 

- name: Add wildfly user to groups
  user: name={{ jboss_user }} groups={{ item }} append=yes
  with_items: jboss_groups
  when: (not wildfly_installed.stdout) or (not wildfly_version_installed.stdout)
  tags: wildfly 

- name: Extract wildfly binary archive file
  unarchive: src="~/Downloads/{{wildfly_download_file}}" dest="{{ wildfly_install_dir }}" owner={{ jboss_user }} group={{ jboss_group }}
#  command: chdir={{ wildfly_install_dir }} tar zxvf {{ wildfly_install_dir }}/{{ wildfly_download_file }} --owner={{ jboss_user }}
  when: (not wildfly_installed.stdout) or (not wildfly_version_installed.stdout)
  tags: wildfly 

- name: "Create a wildfly symlink from {{ wildfly_install_dir }}/{{ wildfly_expanded_dir }} --> {{ jboss_home }}"
  file: src={{ wildfly_install_dir }}/{{ wildfly_expanded_dir }} dest={{ jboss_home }} owner={{ jboss_user }} group={{ jboss_group }} state=link
  when: (not wildfly_installed.stdout) or (not wildfly_version_installed.stdout)
  tags: wildfly 

- name: "Create alt directory ({{ wildfly_install_dir }}/{{ wildfly_alt_dir }}/standalone/deployments) to synch deployments (sigh. vagrant reload)"
  file: path="{{ wildfly_install_dir }}/{{ wildfly_alt_dir }}/standalone/deployments" state=directory owner={{ jboss_user }} group={{ jboss_group }} mode="u=wxr,g=wxr,o=xr" recurse=yes
  when: (not wildfly_installed.stdout) or (not wildfly_version_installed.stdout)
  tags: wildfly 

- name: "Create alt directory ({{ wildfly_install_dir }}/{{ wildfly_alt_dir }}/modules) to install modules"
  file: path="{{ wildfly_install_dir }}/{{ wildfly_alt_dir }}/modules/com/emeraldpoolsolutions/crisp-rest-mod/1.0/lib/linux-x86_64" state=directory owner={{ jboss_user }} group={{ jboss_group }} mode="u=wxr,g=wxr,o=xr" recurse=yes
#  when: (not wildfly_installed.stdout) or (not wildfly_version_installed.stdout)
  tags: wildfly 

- name: Create alt standalone log directory 
  file: path={{ wildfly_install_dir }}/{{ wildfly_alt_dir }}/standalone/log state=directory owner={{ jboss_user }} group={{ jboss_group }} mode="u=wxr,g=wxr,o=r" recurse=yes
  when: (not wildfly_installed.stdout) or (not wildfly_version_installed.stdout)
  tags: wildfly 

- name: Create alt standalone log file 
  file: path={{ wildfly_install_dir }}/{{ wildfly_alt_dir }}/standalone/log/server.log owner={{ jboss_user }} group={{ jboss_group }} state=touch  mode="u=wxr,g=wxr,o=r" 
  when: (not wildfly_installed.stdout) or (not wildfly_version_installed.stdout)
  tags: wildfly 

#- name: "Chown {{ wildfly_install_dir }}/{{ wildfly_alt_dir }} to jboss_user" 
#  file: path={{ wildfly_install_dir }}/{{ wildfly_alt_dir }} recurse=yes state=directory owner={{ jboss_user }} group={{ jboss_group }} mode="u=wxr,g=wxr,o=r"
#  when: (not wildfly_installed.stdout) or (not wildfly_version_installed.stdout)
#  tags: wildfly 

- name: Create a version info file for wildfly install
  template: src=version_info.txt.j2 dest=/{{ wildfly_version_file }} owner={{ jboss_user }} group={{ jboss_group }} mode="u=wr,g=r,o=r" backup=yes
  when: (not wildfly_installed.stdout) or (not wildfly_version_installed.stdout)
  tags: wildfly 

- name: Register name of configuration file
  shell: "[ \"{{ ansible_os_family }}\" = \"Debian\" ] && echo {{ wildfly_conf_dir }}/wildfly || echo {{ wildfly_conf_dir }}/wildfly.conf"
  register: wildfly_conf_file 
  when: (not wildfly_installed.stdout) or (not wildfly_version_installed.stdout)
  tags: wildfly 

- name: Create wildfly configuration file 
  template: src=wildfly.conf.j2 dest={{ wildfly_conf_file.stdout }} owner=root group=root mode="u=wr,g=r,o=r" backup=yes
  notify: restart wildfly 
  when: (not wildfly_installed.stdout) or (not wildfly_version_installed.stdout)
  tags: wildfly 

- name: Create a customized standalone.xml file 
  template: force=yes src=standalone.xml.j2 dest={{ jboss_home }}/standalone/configuration/standalone.xml owner={{ jboss_user }} group={{ jboss_group }} mode="u=wr,g=r,o=r" backup=yes
  notify: restart wildfly 
#  when: (not wildfly_installed.stdout) or (not wildfly_version_installed.stdout)
  tags: wildfly 

- name: Create a customized standalone.conf file 
  template: force=yes src=standalone.conf.j2 dest={{ jboss_home }}/bin/standalone.conf owner={{ jboss_user }} group={{ jboss_group }} mode="u=wr,g=r,o=r" backup=yes
  notify: restart wildfly 
#  when: (not wildfly_installed.stdout) or (not wildfly_version_installed.stdout)
  tags: wildfly 

- name: Set wildfly environment variables 
  template: src=etc_profiled_wildfly.sh.j2 dest=/etc/profile.d/wildfly.sh owner=root group=root mode="u=wr,g=r,o=r" backup=yes
  when: (not wildfly_installed.stdout) or (not wildfly_version_installed.stdout)
  tags: wildfly 
#
#- name: Cleanup wildfly archive file
#  file: path={{ wildfly_install_dir }}/{{ wildfly_download_file }} state=absent
#  when: (not wildfly_installed.stdout) or (not wildfly_version_installed.stdout)
#  tags: wildfly 
#
- name: Create a wildfly init.d script
  template: src=wildfly-init-{{ ansible_os_family }}.sh.j2 dest=/etc/init.d/wildfly owner=root group=root mode="u=wrx,g=rx,o=rx" backup=yes
  when: (not wildfly_installed.stdout) or (not wildfly_version_installed.stdout)
  tags: wildfly 

- name: Enable Wildfly to be started at boot
  service: name=wildfly enabled=yes state=started
  when: (not wildfly_installed.stdout) or (not wildfly_version_installed.stdout)
  tags: wildfly
